// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  MENTOR
  ENTREPRENEUR
  INVESTOR
}

enum DocumentType {
  PROFILE_PICTURE
  IDEA_PITCH_DECK
  MENTOR_PROFILE_PICTURE
  MENTOR_RESUME
}

// Independent Models
model Occupation {
  id             String @id @default(uuid())
  occupationName String @unique

  PersonalInfo PersonalInfo[]

  @@map("occupations")
}

model Segment {
  id          String @id @default(uuid())
  segmentName String @unique

  BusinessInfo BusinessInfo[]
  Idea         Idea[]

  ProfessionalInformation ProfessionalInformation[] @relation("fieldsOfInterest")
  MentorDomainOfWork      ProfessionalInformation[] @relation("domainOfWork")

  @@map("segments")
}

model IdeaStage {
  id    String @id @default(uuid())
  stage String

  Idea Idea[]

  @@map("ideaStages")
}

model Role {
  id   String @id @default(uuid())
  role Roles  @unique

  OnboardingStepOnRole OnboardingStepOnRole[]
  User                 User[]
  SubscriptionPlan     Plan[]

  @@map("roles")
}

model Address {
  id String @id @default(uuid())

  addressLine1 String
  addressLine2 String?

  pinCode      String
  city         String
  state        String
  country      String
  PersonalInfo PersonalInfo[]

  @@map("addresses")
}

//-------

model OnboardingStepOnRole {
  id String @id @default(uuid())

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  stepName String
  User     User[]

  @@map("onboardingStepOnRole")
}

model Document {
  id String @id @default(uuid())

  //Specific to cloudinary fields in comments
  imgFullPath     String //Public_ID
  imgName         String //assetId
  imgOriginalName String //original_filename
  imgDownloadUrl  String //secure_url
  bucket          String //folder

  imgType DocumentType

  PersonalInfo            PersonalInfo[]
  Idea                    Idea?                     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId                  String?
  ProfessionalInformation ProfessionalInformation[]

  @@map("documents")
}

model Plan {
  id String @id @default(uuid())

  planName         String
  durationInMonths Int //in months
  isActive         Boolean @default(false)
  pricePerMonth    Int //Rupees
  discount         Int? //Percentage
  pricePerYear     Int //For discount per year

  role         Role           @relation(fields: [roleId], references: [id])
  roleId       String
  Subscription Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plans")
}

model Invoice {
  id String @id @default(uuid())

  txnId        String //Razorpay id
  amount       BigInt
  currency     String
  status       String
  orderId      String
  invoiceId    String
  method       String
  refundStatus String?
  email        String
  contact      String
  txnCreatedAt DateTime

  createdAt DateTime @default(now())

  Subscription Subscription[]

  @@map("invoices")
}

//----- Entity Models

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username     String  @unique
  email        String? @unique
  passwordHash String

  phone String?

  isEmailVerified Boolean @default(false)
  isPhoneVerified Boolean @default(false)

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  onboardingStep   OnboardingStepOnRole @relation(fields: [onboardingStepId], references: [id])
  onboardingStepId String

  fcmToken         String?
  refreshTokenHash String?

  PersonalInfo            PersonalInfo[]
  BusinessInfo            BusinessInfo[]
  UserOnIdeas             UserOnIdeas[]
  ProfessionalInformation ProfessionalInformation[]
  Subscription            Subscription[]

  @@index(username)
  @@index(email)
  @@map("users")
}

model PersonalInfo {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id

  firstName String
  lastName  String

  profileImage Document @relation(fields: [imageId], references: [id])
  imageId      String

  occupation   Occupation @relation(fields: [occupationId], references: [id])
  occupationId String

  address   Address @relation(fields: [addressId], references: [id])
  addressId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("personalInformation")
}

//---- Entrepreneur - Specific
model BusinessInfo {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id

  organizationName String
  officeAddress    String
  officeContact    String
  websiteUrl       String

  domainOfWork Segment @relation(fields: [segmentId], references: [id])
  segmentId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("businessInformation")
}

model Idea {
  id String @id @default(uuid())

  problemStatement String

  ideaStage   IdeaStage @relation(fields: [ideaStageId], references: [id])
  ideaStageId String

  segment   Segment @relation(fields: [segmentId], references: [id])
  segmentId String

  proposedSolution String

  documents Document[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  UserOnIdeas UserOnIdeas[]

  @@map("ideas")
}

model UserOnIdeas {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId String

  @@id([userId, ideaId])
  @@map("userOnIdeas")
}

// ----- Mentor Specific
model ProfessionalInformation {
  user   User   @relation(fields: [userId], references: [id])
  userId String @id

  linkedIn String
  resume   Document @relation(fields: [resumeId], references: [id])
  resumeId String

  segment   Segment @relation(fields: [segmentId], references: [id], name: "domainOfWork")
  segmentId String

  priorMentorExperience Boolean @default(false)
  currentJobTitle       String

  organization String

  timeInvestment Int //In hours per week

  fieldsOfInterest Segment[] @relation("fieldsOfInterest")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  plan   Plan   @relation(fields: [planId], references: [id])
  planId String

  startDate DateTime
  endDate   DateTime

  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, planId])
  @@map("subscriptions")
}
